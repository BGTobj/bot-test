import { Markup, Scenes } from "telegraf";
import { message } from 'telegraf/filters'
import express from 'express'
import bodyParser from 'body-parser'
import dotenv from 'dotenv'
dotenv.config()
import { GoogleSpreadsheet } from'google-spreadsheet'
import { JWT } from 'google-auth-library'
import sqlite3  from 'sqlite3'
sqlite3.verbose();
import Mail from './mail.js'
const { SPREADSHEETID_PROD, CLIENT_EMAIL, EMAIL_HOST_USER, GROUP_URL } = process.env
const { privateKey } = JSON.parse(process.env.PRIVATE_KEY)
const SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive.file',
  ];
const serviceAccountAuth = new JWT({
    email: CLIENT_EMAIL,
    key: privateKey,
    scopes: SCOPES,
  });

const doc = new GoogleSpreadsheet(SPREADSHEETID_PROD, serviceAccountAuth);

const appMailer = express()
appMailer.use(bodyParser.json())

const db = new sqlite3.Database('bot.db');
let sql;
let userId;
let userCity;
let userDrugStoreId;
let userDrugStoreAdress;
const mainMenu = Markup
    .keyboard([
        ['üì¢ –ê–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', 
        'üìç –ê–¥—Ä–µ—Å–∞ –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã'],
        ['‚≠êÔ∏è –ú–æ–∏ –∞–ø—Ç–µ–∫–∏', 
        'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'],
        ['‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
        '‚ö†Ô∏è –í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'],
        ['üíö –ù–∞—à –∫–∞–Ω–∞–ª']
    ])
    .oneTime()
    .resize()

const deleteFavoriteKeyboard = Markup.inlineKeyboard(
    [[Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', 'deleteFavorite')],
    [Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu')]],).oneTime().resize()

const insertFavoriteKeyboard = Markup.inlineKeyboard(
    [[Markup.button.callback('‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'insertFavorite')],
    [Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu')]],).oneTime().resize()

const fullRegions = [];
let regions = [];
let regionsRes = [];
let cities = [];
let idApt = [];
let adress = [];
let schedule = [];
let urlYm = [];
let importantMsg = [];
let arCity = [];
let arCityRes = []
let arDrugStore = [];
let regionPromo = [];
let namePromo = [];
let datePromo = [];
let idAptPromo = [];
let adressPromo = [];
let urlPromo = [];
let nameImportant = [];
let dateImportant = [];
let regionImportant = [];
let cityImportant = [];
let idAptImportant = [];
let adressImportant = [];
let promoKeyboardRes = []
let promoKeyboard = [`–ê–∫—Ü–∏–∏ –≤ –∞–ø—Ç–µ–∫–µ`, `–ê–∫—Ü–∏–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ`, '‚Ü©Ô∏è –ù–∞–∑–∞–¥']
while(promoKeyboard.length) promoKeyboardRes.push(promoKeyboard.splice(0,2));
let importantMsgKeyboardRes = [];
let importantMsgKeyboard = [`–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥—É`, `–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∞–ø—Ç–µ–∫–∞–º`, '‚Ü©Ô∏è –ù–∞–∑–∞–¥']
while(importantMsgKeyboard.length) importantMsgKeyboardRes.push(importantMsgKeyboard.splice(0,2));
//–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ google-sheets
const getInfo = async () => {
    await doc.loadInfo()
    const aptekiSheet = doc.sheetsByIndex[0];
    const rows = await aptekiSheet.getRows();
    const promoSheet = doc.sheetsByIndex[1];
    const rowsPromo = await promoSheet.getRows();
    const importantSheet = doc.sheetsByIndex[2];
    const rowsImportant = await importantSheet.getRows();
    for (let rowImp of rowsImportant) {
        nameImportant.push(rowImp.get('name'));
        dateImportant.push(rowImp.get('date'));
        regionImportant.push(rowImp.get('region'));
        cityImportant.push(rowImp.get('city'));
        idAptImportant.push(rowImp.get('id_apt'));
        adressImportant.push(rowImp.get('adress'));
    }
    for (let row of rowsPromo) {
        namePromo.push(row.get('name'));
        datePromo.push(row.get('date'));
        regionPromo.push(row.get('region'));
        idAptPromo.push(row.get('id_apt_promo'));
        adressPromo.push(row.get('adress_apt_promo'));
        urlPromo.push(row.get('url_promo'));
    }
    for (let key in rows) {
        fullRegions.push(rows[key].get('region'));
        cities.push(rows[key].get('city'))
        idApt.push(rows[key].get('id_apt'));
        adress.push(rows[key].get('adress'));
        schedule.push(rows[key].get('schedule'));
        urlYm.push(rows[key].get('urlYM'));
        importantMsg.push(rows[key].get('important'));
    }
    
    regions = Array.from(new Set(fullRegions));
    while(regions.length) regionsRes.push(regions.splice(0,2));
}
getInfo();
let tmpRegion;
const buttons = ['–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –Ω–∞—Å', '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è', '–û—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∞–ø—Ç–µ–∫–∏/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', '–û—Ç–∑—ã–≤ –æ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö', 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'];
let userMessage = ''
let userEmail = '–ù–µ —É–∫–∞–∑–∞–ª'
let adressDrugStore = '–ù–µ —É–∫–∞–∑–∞–ª'
const backMainMenu = Markup.inlineKeyboard(
    [[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back'),],
    [Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu'),],
    ])
// Handler factories
const { enter, leave } = Scenes.Stage;

class SceneGenerator {
    //–ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã "–ê–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" —Å –≤—ã–±–æ—Ä–æ–º –∞–∫—Ü–∏–π –≤ —Ä–µ–≥–∏–æ–Ω–µ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–ø—Ç–µ–∫–µ
    startPromoScene() {
        const startPromo = new Scenes.BaseScene("startPromo");
        startPromo.enter((ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, Markup.keyboard(promoKeyboardRes).oneTime().resize())
        })
        
        startPromo.on(message('text'), ctx => {
            const msg = ctx.message.text;
            if (msg === '/start' || msg === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            if (msg === `–ê–∫—Ü–∏–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ`) {
                ctx.scene.leave()
                ctx.scene.enter('promo')
            }
            if (msg === `–ê–∫—Ü–∏–∏ –≤ –∞–ø—Ç–µ–∫–µ`) {
                ctx.scene.leave()
                ctx.scene.enter('getPromoCity')
            }
        })
        return startPromo;
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –∞–∫—Ü–∏–π
    getPromoCityScene() {
        const getPromoCity = new Scenes.BaseScene("getPromoCity");
        getPromoCity.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç`, Markup.keyboard(regionsRes).oneTime().resize(), {parse_mode: 'HTML'})
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
            arCityRes.length = 0;
        });
        getPromoCity.action('mainMenu', ctx => {
            ctx.scene.leave()
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getPromoCity.action('back', ctx => {
            ctx.scene.leave()
            ctx.scene.enter('startPromo')
        })
        getPromoCity.on(message('text'), async ctx => {
            
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            for (let i in fullRegions) {
                if (msg === fullRegions[i]) {
                    arCity.push(cities[i]);
                    tmpRegion = msg;
                }
            }
            
            arCity = Array.from(new Set(arCity))
            while(arCity.length) arCityRes.push(arCity.splice(0,2));
            if (arCityRes.length > 0) {
                ctx.scene.leave()
                ctx.scene.enter('getListPromoDrugStore')
            } else {
                ctx.scene.leave()
            }
        })
        getPromoCity.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getPromoCity;
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ø—Ç–µ–∫ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∞–∫—Ü–∏–π
    getListPromoDrugStoreScene() {
        const getListPromoDrugStore = new Scenes.BaseScene("getListPromoDrugStore");
        getListPromoDrugStore.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥`, Markup.keyboard(arCityRes).oneTime().resize(), {parse_mode: 'HTML'}) 
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
        });
        getListPromoDrugStore.action('mainMenu', ctx => {
            arCityRes.length = 0;
            ctx.scene.leave()
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getListPromoDrugStore.action('back', ctx => {
            ctx.scene.leave()
            ctx.scene.enter('getPromoCity')
        })
        getListPromoDrugStore.on(message('text'), async ctx  => {
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            for (let i in fullRegions) {
                if (msg === cities[i]) {
                    arDrugStore.push(`–ê–ø—Ç–µ–∫–∞ ‚Ññ${idApt[i]} –Ω–∞ ${adress[i]}`);
                }
            }
            arCity.length = 0;
            //arCityRes.length = 0;
            if (arDrugStore.length > 0) {
                ctx.scene.leave()
                ctx.scene.enter('getPromoDrugStore')
            } else {
                ctx.scene.leave()
            }
        })
        getListPromoDrugStore.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getListPromoDrugStore;
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–ø—Ç–µ–∫–µ
    getPromoDrugStoreScene() {
        const getPromoDrugStore = new Scenes.BaseScene("getPromoDrugStore");
        getPromoDrugStore.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –∞–ø—Ç–µ–∫—É`, Markup.keyboard(arDrugStore).oneTime().resize(), {parse_mode: 'HTML'})
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
        });
        getPromoDrugStore.action('mainMenu', async ctx => {
            arDrugStore.length = 0;
            ctx.scene.leave()
            await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getPromoDrugStore.action('back', ctx => {
            arDrugStore.length = 0;
            ctx.scene.leave()
            ctx.scene.enter('getListPromoDrugStore')
        })
        getPromoDrugStore.on(message('text'), async ctx  => {
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            
            let arResPromo = [];
            let arResPromoRegion = [];
            for (let i in idAptPromo) {
                if (msg === `–ê–ø—Ç–µ–∫–∞ ‚Ññ${idAptPromo[i]} –Ω–∞ ${adressPromo[i]}`) {
                    arResPromo.push(`–í –∞–ø—Ç–µ–∫–µ ‚Ññ ${idAptPromo[i]} –ø–æ –∞–¥—Ä–µ—Å—É ${adressPromo[i]} ${datePromo[i]} –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–∫—Ü–∏—è "${namePromo[i]}", –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∞–∫—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ <a href="${urlPromo[i]}">—Å—Å—ã–ª–∫–µ</a>\n`)
                } else if (tmpRegion === regionPromo[i]){
                    arResPromoRegion.push(`${datePromo[i]} –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–∫—Ü–∏—è "${namePromo[i]}", –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∞–∫—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ <a href="${urlPromo[i]}">—Å—Å—ã–ª–∫–µ</a>\n`)
                    continue
                }
                
            }
            arDrugStore.length = 0;
            if (arResPromo.length > 0) {
                ctx.reply(arResPromo.join(''), {parse_mode: 'HTML', disable_web_page_preview: true, reply_markup: backMainMenu.reply_markup});
            } else {
                ctx.reply(`–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–ø—Ç–µ–∫–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π üòî. –ê–∫—Ü–∏–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ ${tmpRegion} üëá`)
                ctx.reply(arResPromoRegion.join(''), {parse_mode: 'HTML', disable_web_page_preview: true, reply_markup: backMainMenu.reply_markup});
            }
        })
        getPromoDrugStore.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getPromoDrugStore;
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ö–æ–¥—è—â–∏—Ö –∞–∫—Ü–∏–π –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    getPromoScene() {
        const promo = new Scenes.BaseScene("promo");
        promo.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç`, Markup.keyboard(regionsRes).oneTime().resize(), {parse_mode: 'HTML'})
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
        });
        promo.action('mainMenu', async ctx => {
            ctx.scene.leave()
            await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        promo.action('back', async ctx => {
            ctx.scene.leave()
            await ctx.scene.enter('startPromo')
        })
        promo.on(message('text'), async ctx => {
            const msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            let arResPromo = []
            for (let key in regionPromo) {
                if(msg === regionPromo[key]) {
                    arResPromo.push(`${datePromo[key]} –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–∫—Ü–∏—è "${namePromo[key]}", –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∞–∫—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ <a href="${urlPromo[key]}">—Å—Å—ã–ª–∫–µ</a>\n`)
                } else {
                    continue
                }
            }
            if (arResPromo.length > 0) {
                await ctx.reply(arResPromo.join(''), {parse_mode: 'HTML', disable_web_page_preview: true,  reply_markup: backMainMenu.reply_markup});
            } else {
                ctx.reply(`–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π üòî`, backMainMenu)
            }
        });
        promo.on("message", (ctx) => {
            ctx.reply("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç");
            ctx.scene.reenter()
        });
        
        return promo;
    }

    //—Å—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    sendQuestionScene() {
        const sendQuestion = new Scenes.BaseScene("sendQuestion");
        sendQuestion.enter( (ctx) => {
            ctx.reply(`–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç. –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç –í–∞–º –∏ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ <b>–ü–µ—Ä–µ–π—Ç–∏</b> üëá`, 
                    {parse_mode: 'HTML', reply_markup: Markup.inlineKeyboard(
                    [[Markup.button.url('‚ö†Ô∏è –ü–µ—Ä–µ–π—Ç–∏', GROUP_URL)],
                    [Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu')],], 
                ).reply_markup}
            )
            ctx.scene.leave()
        })
        sendQuestion.action('mainMenu', async ctx => {
            ctx.scene.leave()
            await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        sendQuestion.on("message", (ctx) => {
            ctx.reply("–û—à–∏–±–∫–∞");
            ctx.scene.leave()
        })
        return sendQuestion;    
    }

    //–°—Ü–µ–Ω–∞ "–ê–¥—Ä–µ—Å–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∞–ø—Ç–µ–∫", –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    getCityScene() {
        const getCity = new Scenes.BaseScene("getCity");
        getCity.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç`, Markup.keyboard(regionsRes).oneTime().resize(), {parse_mode: 'HTML'})
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, Markup.inlineKeyboard([Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu'),]))
            arCityRes.length = 0;
        })
        getCity.action('mainMenu', ctx => {
            ctx.scene.leave();
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getCity.on(message('text'), async ctx => {
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            for (let i in fullRegions) {
                if (msg === fullRegions[i]) {
                    arCity.push(cities[i]);
                }
            }
            arCity = Array.from(new Set(arCity))
            while(arCity.length) arCityRes.push(arCity.splice(0,2));
            if (arCityRes.length > 0) {
                ctx.scene.leave()
                ctx.scene.enter('getListDrugStore')
            } else {
                ctx.scene.leave()
            }
            
        })
        getCity.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getCity;
    }

    //–°—Ü–µ–Ω–∞ "–ê–¥—Ä–µ—Å–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∞–ø—Ç–µ–∫", –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ø—Ç–µ–∫ –∏–∑ –≥–æ—Ä–æ–¥–∞
    getListDrugStoreScene() {
        const getListDrugStore = new Scenes.BaseScene("getListDrugStore");
        getListDrugStore.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥`, Markup.keyboard(arCityRes).oneTime().resize(), {parse_mode: 'HTML'})
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
        })
        getListDrugStore.action('mainMenu', ctx => {
            arCityRes.length = 0;
            ctx.scene.leave()
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getListDrugStore.action('back', ctx => {
            ctx.scene.leave()
            ctx.scene.enter('getCity')
        })
        getListDrugStore.on(message('text'), async ctx  => {
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            for (let i in fullRegions) {
                if (msg === cities[i]) {
                    arDrugStore.push(`–ê–ø—Ç–µ–∫–∞ ‚Ññ${idApt[i]} –Ω–∞ ${adress[i]}`);
                    userCity = msg
                }
            }
            arCity.length = 0;
            //arCityRes.length = 0;
            if (arDrugStore.length > 0) {
                ctx.scene.leave()
                ctx.scene.enter('getDrugStore')
            } else {
                ctx.scene.leave()
            }
        })
        getListDrugStore.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getListDrugStore;
    }

    //–°—Ü–µ–Ω–∞ "–ê–¥—Ä–µ—Å–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∞–ø—Ç–µ–∫", –≤—ã–±–æ—Ä –∞–ø—Ç–µ–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–ø—Ç–µ–∫–µ
    getDrugStoreScene() {
        const getDrugStore = new Scenes.BaseScene("getDrugStore");
        getDrugStore.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –∞–ø—Ç–µ–∫—É`, Markup.keyboard(arDrugStore).oneTime().resize(), {parse_mode: 'HTML'})
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
        })
        getDrugStore.action('mainMenu', async ctx => {
            arDrugStore.length = 0;
            ctx.scene.leave()
            await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getDrugStore.action('back', ctx => {
            arDrugStore.length = 0;
            ctx.scene.leave()
            ctx.scene.enter('getListDrugStore')
        })
        getDrugStore.on(message('text'), async ctx  => {
            userId = ctx.message.from.id;
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            for (let i in fullRegions) {
                if (msg === `–ê–ø—Ç–µ–∫–∞ ‚Ññ${idApt[i]} –Ω–∞ ${adress[i]}`) {
                    userDrugStoreId = idApt[i];
                    userDrugStoreAdress = adress[i];
                    db.serialize(() => {
                        db.get(`SELECT id_apt, user_id FROM usersDrugstores WHERE id_apt = ? AND user_id = ?`, [userDrugStoreId, userId], (err, row) => {
                            if (err) {
                                return console.error(err.message)
                            }
                            ctx.reply(`–ê–ø—Ç–µ–∫–∞ ‚Ññ ${idApt[i]}, –≥. ${cities[i]}, ${adress[i]}, —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ${schedule[i]}, <a href="${urlYm[i]}">–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å</a>`, {parse_mode: 'HTML', disable_web_page_preview: true, reply_markup: row ? deleteFavoriteKeyboard.reply_markup : insertFavoriteKeyboard.reply_markup});
                        });
                    })
                }
            }
            arDrugStore.length = 0;
        })
        getDrugStore.action('insertFavorite', (ctx) => {
            ctx.scene.leave()
            ctx.scene.enter('insertFavoriteDrugstore')
        })
        getDrugStore.action('deleteFavorite', (ctx) => {
            ctx.scene.leave()
            ctx.scene.enter('deleteFavoriteDrugstore');
        })
        getDrugStore.action('mainMenu', async ctx => {
            ctx.scene.leave()
            await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getDrugStore.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getDrugStore;
    }

    //–°—Ü–µ–Ω–∞ "–ê–¥—Ä–µ—Å–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∞–ø—Ç–µ–∫", —Å—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    insertFavoriteDrugstoreScene() {
        const insertFavoriteDrugstore = new Scenes.BaseScene("insertFavoriteDrugstore");
        insertFavoriteDrugstore.enter(async ctx => {
            let userFavoriteDrugstoreData = [];
            userFavoriteDrugstoreData.push(userDrugStoreId, userCity, userDrugStoreAdress, userId)
            db.serialize(() => {
                sql = `INSERT INTO usersDrugstores(id_apt, cityOfDrugstore, adress, user_id) VALUES (?,?,?,?)`;
                db.run(sql, userFavoriteDrugstoreData, (e) => {
                    if(e) {
                        return console.error(e.message)
                    }
                    ctx.reply(`–ê–ø—Ç–µ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ`)
                });
            })
            await ctx.reply(`–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É –≤ –ú–ü (—Å—Å—ã–ª–∫–∞), –Ω–∞ —Å–∞–π—Ç–µ (—Å—Å—ã–ª–∫–∞) –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É (—Å—Å—ã–ª–∫–∞)`, {parse_mode: 'HTML', disable_web_page_preview: true, reply_markup: backMainMenu.reply_markup})
            ctx.scene.leave()
        })       
        return insertFavoriteDrugstore;
    }

    //–°—Ü–µ–Ω–∞ "–ú–æ–∏ –∞–ø—Ç–µ–∫–∏", —Å—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    deleteFavoriteDrugstoreScene() {
        const deleteFavoriteDrugstore = new Scenes.BaseScene("deleteFavoriteDrugstore");
        deleteFavoriteDrugstore.enter(async (ctx) => {
            db.serialize(() => {
                db.get(`SELECT id_apt, user_id FROM usersDrugstores WHERE id_apt = ? AND user_id = ?`, [userDrugStoreId, userId], (err, row) => {
                    if (err) {
                        return console.error(err.message)
                    }
                    if (row) {
                        sql = `DELETE FROM usersDrugstores WHERE id_apt = ? AND user_id = ?`;
                        db.run(sql, [userDrugStoreId, userId], (e) => {
                            if(e) {
                                return console.error(e.message)
                            }
                            ctx.scene.leave()
                        });
                        ctx.reply(`–ê–ø—Ç–µ–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ`)
                    } else {
                        ctx.reply(`–≠—Ç–æ–π –∞–ø—Ç–µ–∫–∏ –Ω–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º`);
                        ctx.scene.leave()
                    }
                });  
            })
            await ctx.reply(`–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É –≤ –ú–ü (—Å—Å—ã–ª–∫–∞), –Ω–∞ —Å–∞–π—Ç–µ (—Å—Å—ã–ª–∫–∞) –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É (—Å—Å—ã–ª–∫–∞)`, {parse_mode: 'HTML', disable_web_page_preview: true, reply_markup: backMainMenu.reply_markup})
            ctx.scene.leave()
        })
        return deleteFavoriteDrugstore;
    }

    //–°—Ü–µ–Ω–∞ "–ú–æ–∏ –∞–ø—Ç–µ–∫–∏"
    myDrugStoresScene() {
        const myDrugStores = new Scenes.BaseScene("myDrugStores");
        myDrugStores.enter( (ctx) => {
            userId = ctx.message.from.id;
            let arUsersDrugstore = [];
            db.serialize(() => {
                sql = `SELECT id_apt, user_id, adress FROM usersDrugstores ORDER BY id_apt`
                db.all(sql, (err, rows) => {
                    if (err) {
                        return console.error(err.message)
                    }
                    rows.forEach((row) => {
                        if (row.user_id === userId) {
                            arUsersDrugstore.push(`–ê–ø—Ç–µ–∫–∞ ‚Ññ${row.id_apt} –Ω–∞ ${row.adress}`)
                        }
                    });
                    if(arUsersDrugstore.length > 0) {
                        ctx.reply(`–í–∞—à–∏ –∞–ø—Ç–µ–∫–∏`, Markup.keyboard(arUsersDrugstore).oneTime().resize())
                        ctx.scene.enter('getDrugStore')
                    } else {
                        return ctx.reply(`–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–ø—Ç–µ–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º üôÇ`, Markup.inlineKeyboard([Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu')]))
                    }
                  }); 
            })
            ctx.scene.leave()
        })
        myDrugStores.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return myDrugStores;
    }

    //–°—Ü–µ–Ω–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
    sendReviewScene() {
        const sendReview = new Scenes.BaseScene("sendReview");
        sendReview.enter((ctx) => {
            ctx.reply(`üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, Markup.keyboard(buttons).oneTime().resize(), {parse_mode: 'HTML'})
        })
        sendReview.on(message('text'), async ctx => {
            let msg = ctx.message.text;
            if (msg === "–û—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∞–ø—Ç–µ–∫–∏/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞") {
                ctx.scene.leave()
                ctx.scene.enter('getReviewMessageMan')
            } else if (msg === "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" || msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            } else {
                for (let i in buttons) {
                    if (msg === buttons[i-1]) {
                        ctx.scene.leave()
                        ctx.scene.enter('getReviewMessage')
                    }
                }
            }  
        })
        sendReview.on(message, async ctx => {
            ctx.scene.leave()
            await ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return sendReview;
    }

    //–°—Ü–µ–Ω–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∞–ø—Ç–µ–∫–∏/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∞–ø—Ç–µ–∫–∏)
    getReviewMessageManScene() {
        const getReviewMessageMan = new Scenes.BaseScene("getReviewMessageMan");
        getReviewMessageMan.enter((ctx) => {
            ctx.reply(`‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –∞–ø—Ç–µ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—É–ª–∏—Ü–∞ –¥–æ–º"`, backMainMenu)
        })
        getReviewMessageMan.on(message('text'), async ctx => {
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            adressDrugStore = msg
            ctx.scene.leave()
            ctx.scene.enter('getReviewMessage')
        })
        getReviewMessageMan.action('mainMenu', async ctx => {
            ctx.scene.leave()
            await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getReviewMessageMan.action('back', async ctx => {
            ctx.scene.leave()
            ctx.scene.enter('sendReview')
        })
        getReviewMessageMan.on(message, async ctx => {
            ctx.scene.leave()
            await ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getReviewMessageMan;
    }

    //–°—Ü–µ–Ω–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getReviewMessageScene() {
        const getReviewMessage = new Scenes.BaseScene("getReviewMessage");
        getReviewMessage.enter((ctx) => {
            ctx.reply(`‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∏–¥–µ—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è`, backMainMenu)
        })
        getReviewMessage.on(message('text'), async ctx => {
            let msg = ctx.message.text;
            if (msg.length === 0) {
                ctx.scene.reenter()
            } else if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            } else {
                userMessage = msg;
                ctx.reply(`‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç`, Markup.inlineKeyboard(
                    [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'Check'),]))
                ctx.scene.leave()
                ctx.scene.enter('getUserEmail')
            }
        })
        getReviewMessage.action('back', async ctx => {
            ctx.scene.leave()
            ctx.scene.enter('sendReview')
        })
        getReviewMessage.action('mainMenu', async ctx => {
            ctx.scene.leave()
            await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getReviewMessage.on(message, async ctx => {
            ctx.scene.leave()
            await ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getReviewMessage;
    }

    //–°—Ü–µ–Ω–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", –ø–æ–ª—É—á–µ–Ω–∏–µ email –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å)
    getUserEmailScene() {
        const getUserEmail = new Scenes.BaseScene("getUserEmail");
        getUserEmail.action('Check', (ctx) => {
            ctx.reply(`üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É`, Markup.inlineKeyboard(
                [Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'Send'),],
                ))
                ctx.scene.leave()
                ctx.scene.enter('postReview')
            })
        getUserEmail.on(message('text'), async ctx => {
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            } else {
                userEmail = msg;
            ctx.reply(`üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É`, Markup.inlineKeyboard(
                [Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'Send'),],))
            ctx.scene.leave()
            ctx.scene.enter('postReview')
            }
        })
        getUserEmail.on(message, async ctx => {
            ctx.scene.leave()
            await ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getUserEmail;
    }

    //–°—Ü–µ–Ω–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ—á—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏
    postReviewScene() {
        const postReview = new Scenes.BaseScene("postReview");
        postReview.action('Send', async (ctx) => {
            const data = `–ê–¥—Ä–µ—Å –∞–ø—Ç–µ–∫–∏: ${adressDrugStore}\n–ü–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userEmail}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${userMessage}`
            Mail.send(EMAIL_HOST_USER, data)
            ctx.reply(`–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ—Ç–¥–µ–ª –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞. –ú—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö –¥–Ω–µ–π, –Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É –ø–æ—á—Ç—É –∏ –ø–∞–ø–∫—É —Å–ø–∞–º. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!`, Markup.inlineKeyboard([Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu')]))
            ctx.scene.leave()
        })
        postReview.action('mainMenu', async ctx => {
            ctx.scene.leave()
            await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        return postReview;
    }

    //–ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã "–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è" —Å –≤—ã–±–æ—Ä–æ–º —Å–æ–±—â–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–ø—Ç–µ–∫–µ

    startImportantMsgScene() {
        const startImportantMsg = new Scenes.BaseScene("startImportantMsg");
        startImportantMsg.enter((ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, Markup.keyboard(importantMsgKeyboardRes).oneTime().resize())
        })

        startImportantMsg.on(message('text'), ctx => {
            const msg = ctx.message.text;
            if (msg === '/start' || msg === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            if (msg === `–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥—É`) {
                ctx.scene.leave()
                ctx.scene.enter('importantMessageCity')
            }
            if (msg === `–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∞–ø—Ç–µ–∫–∞–º`) {
                ctx.scene.leave()
                ctx.scene.enter('getListCityImpotrantMsg')
            }
        })
        return startImportantMsg;
    }

    //–°—Ü–µ–Ω–∞ "–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É
    importantMessageCityScene() {
        const importantMessageCity = new Scenes.BaseScene("importantMessageCity");
        importantMessageCity.enter((ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç`, Markup.keyboard(regionsRes).oneTime().resize(), {parse_mode: 'HTML'})
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
            arCityRes.length = 0;
        })
        importantMessageCity.action('mainMenu', ctx => {
            ctx.scene.leave()
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        importantMessageCity.action('back', ctx => {
            ctx.scene.leave()
            ctx.scene.enter('startImportantMsg')
        })
        importantMessageCity.on(message('text'), async ctx => {
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            for (let i in fullRegions) {
                if (msg === fullRegions[i]) {
                    arCity.push(cities[i]);
                }
            }
            arCity = Array.from(new Set(arCity))
            while(arCity.length) arCityRes.push(arCity.splice(0,2));
            if (arCityRes.length > 0) {
                ctx.scene.leave()
                ctx.scene.enter('getImportantMessage')
            } else {
                ctx.scene.leave()
            }
            
        })
        importantMessageCity.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return importantMessageCity;
    }

    //–°—Ü–µ–Ω–∞ "–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
    getImportantMessageScene() {
        const getImportantMessage = new Scenes.BaseScene("getImportantMessage");
        getImportantMessage.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥`, Markup.keyboard(arCityRes).oneTime().resize(), {parse_mode: 'HTML'})
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
        })
        getImportantMessage.action('mainMenu', ctx => {
            arCityRes.length = 0;
            ctx.scene.leave()
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getImportantMessage.action('back', ctx => {
            ctx.scene.leave()
            ctx.scene.enter('importantMessageCity')
        })
        getImportantMessage.on(message('text'), async ctx  => {
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            let arResImportant = [];
            for (let key in cityImportant) {
                if (msg === cityImportant[key]) {
                    arResImportant.push(`–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥—É ${cityImportant[key]} : <b>${nameImportant[key]}</b>\n`)
                    
                } else {
                    continue
                }
            }
            if (arResImportant.length > 0) {
                await ctx.reply(arResImportant.join(''), {parse_mode: 'HTML', reply_markup: Markup.inlineKeyboard([Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu')]).reply_markup});
            } else {
                ctx.reply(`–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π üòî`, Markup.inlineKeyboard([Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu')]))
            }
            arCity.length = 0;
            ctx.scene.leave()
        })
        
        getImportantMessage.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getImportantMessage;
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —Å –≤–∞–∂–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    getListCityImpotrantMsgScene () {
        const getListCityImpotrantMsg = new Scenes.BaseScene("getListCityImpotrantMsg");
        getListCityImpotrantMsg.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç`, Markup.keyboard(regionsRes).oneTime().resize(), {parse_mode: 'HTML'})
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
            arCityRes.length = 0;
        });
        getListCityImpotrantMsg.action('mainMenu', ctx => {
            ctx.scene.leave()
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getListCityImpotrantMsg.action('back', ctx => {
            ctx.scene.leave()
            ctx.scene.enter('startImportantMsg')
        })
        getListCityImpotrantMsg.on(message('text'), async ctx => {
            
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            for (let i in fullRegions) {
                if (msg === fullRegions[i]) {
                    arCity.push(cities[i]);
                }
            }
            
            arCity = Array.from(new Set(arCity))
            while(arCity.length) arCityRes.push(arCity.splice(0,2));
            if (arCityRes.length > 0) {
                ctx.scene.leave()
                ctx.scene.enter('getListImportantMsgDrugStore')
            } else {
                ctx.scene.leave()
            }
        })
        getListCityImpotrantMsg.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getListCityImpotrantMsg;
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ø—Ç–µ–∫ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å –≤–∞–∂–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    getListImportantMsgDrugStoreScene() {
        const getListImportantMsgDrugStore = new Scenes.BaseScene("getListImportantMsgDrugStore");
        getListImportantMsgDrugStore.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥`, Markup.keyboard(arCityRes).oneTime().resize(), {parse_mode: 'HTML'}) 
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
        });
        getListImportantMsgDrugStore.action('mainMenu', ctx => {
            arCityRes.length = 0;
            ctx.scene.leave()
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getListImportantMsgDrugStore.action('back', ctx => {
            ctx.scene.leave()
            ctx.scene.enter('getListCityImpotrantMsg')
        })
        getListImportantMsgDrugStore.on(message('text'), async ctx  => {
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            for (let i in fullRegions) {
                if (msg === cities[i]) {
                    arDrugStore.push(`–ê–ø—Ç–µ–∫–∞ ‚Ññ${idApt[i]} –Ω–∞ ${adress[i]}`);
                }
            }
            arCity.length = 0;
            //arCityRes.length = 0;
            if (arDrugStore.length > 0) {
                ctx.scene.leave()
                ctx.scene.enter('getImportantMsgDrugStore')
            } else {
                ctx.scene.leave()
            }
        })
        getListImportantMsgDrugStore.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getListImportantMsgDrugStore;
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–ø—Ç–µ–∫–µ
    getImportantMsgDrugStoreScene() {
        const getImportantMsgDrugStore = new Scenes.BaseScene("getImportantMsgDrugStore");
        getImportantMsgDrugStore.enter( (ctx) => {
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –∞–ø—Ç–µ–∫—É`, Markup.keyboard(arDrugStore).oneTime().resize(), {parse_mode: 'HTML'})
            ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, backMainMenu)
        });
        getImportantMsgDrugStore.action('mainMenu', async ctx => {
            arDrugStore.length = 0;
            ctx.scene.leave()
            await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
        })
        getImportantMsgDrugStore.action('back', ctx => {
            arDrugStore.length = 0;
            ctx.scene.leave()
            ctx.scene.enter('getListImportantMsgDrugStore')
        })
        getImportantMsgDrugStore.on(message('text'), async ctx  => {
            let msg = ctx.message.text;
            if (msg === '/start') {
                ctx.scene.leave()
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
            }
            let arResImportant = [];
            for (let i in idAptImportant) {
                if (msg === `–ê–ø—Ç–µ–∫–∞ ‚Ññ${idAptImportant[i]} –Ω–∞ ${adressImportant[i]}`) {
                    arResImportant.push(`–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–ø—Ç–µ–∫–∏ ‚Ññ ${idAptImportant[i]} –ø–æ –∞–¥—Ä–µ—Å—É ${adressImportant[i]}: ${nameImportant[i]}\n`);
                } else  {
                    continue
                }
            }
            if (arResImportant.length > 0) {
                ctx.reply(arResImportant.join(''), {parse_mode: 'HTML', disable_web_page_preview: true, reply_markup: backMainMenu.reply_markup})
            } else {
                ctx.reply(`–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–ø—Ç–µ–∫–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π üòî`, backMainMenu);
            }
            
            arDrugStore.length = 0;
        })
        getImportantMsgDrugStore.on(message, ctx => {
            ctx.scene.leave()
            ctx.reply(`–û—à–∏–±–∫–∞`, backMainMenu)
        })
        return getImportantMsgDrugStore;
    }
}

export default SceneGenerator
