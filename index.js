const { Telegraf, Markup } = require('telegraf')
const { message } = require('telegraf/filters')
require('dotenv').config()
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');
const bot = new Telegraf('6546876939:AAHoYRs_HQMuIJgj1wuPp5fHaD-sQAjw1ww')
const creds = require('./credentials.json');
const SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive.file',
  ];
const serviceAccountAuth = new JWT({
    email: creds.client_email,
    key: creds.private_key,
    scopes: SCOPES,
  });

const doc = new GoogleSpreadsheet(process.env.SPREADSHEETID, serviceAccountAuth);

const getInfo = async () => {
    await doc.loadInfo();
}

const mainMenu = Markup
    .keyboard([
      '–ê–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', 
      '–ê–¥—Ä–µ—Å–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∞–ø—Ç–µ–∫', 
      '–ú–æ–∏ –∞–ø—Ç–µ–∫–∏',
      '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
      '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'
    ])
    .oneTime()
    .resize()

const backMainMenu = Markup.inlineKeyboard(
    [Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu'),],
    )

bot.action('mainMenu', async ctx => {
    await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç`, mainMenu)
})
 // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`

bot.start(async (ctx) => {
    const userFirstName = ctx.message.chat.first_name;
    await ctx.reply(`Welcome, ${userFirstName}`, mainMenu)
});

const sendReview = async () => {
    const buttons = Markup.keyboard([
        '–ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –Ω–∞—Å',
        '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è',
        '–æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∞–ø—Ç–µ–∫–∏/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
        '–æ—Ç–∑—ã–≤ –æ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö',
        '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    ])
    .oneTime()
    .resize()
    
    bot.hears('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', async ctx => {
        await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ`, buttons)
        console.log(buttons)
    })
   
    bot.hears('–æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∞–ø—Ç–µ–∫–∏/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', async (ctx) => {
            await ctx.reply(`–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∞–ø—Ç–µ–∫–∏`);
    })

    bot.hears('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∞–ø—Ç–µ–∫–∏', async (ctx) => {

        await ctx.reply(`–Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å`);
    })

    bot.hears('–ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –Ω–∞—Å', async (ctx) => {

        await ctx.reply(`–Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å`);
    })

    bot.hears('–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è', async (ctx) => {

        await ctx.reply(`–Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å`);
    })

    bot.hears('–æ—Ç–∑—ã–≤ –æ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö', async (ctx) => {

        await ctx.reply(`–Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å`);
    })
    

}

/* let transporter = nodemailer.createTransport({
    host: 'smtp.mail.ru',
    port: 587,
    secure: false,
    auth: {
      user: 'anton1ebedev222@mail.ru',
      pass: '%taTEatAYt14'
    }
  });


  async function main() {
    // send mail with defined transport object
    const info = await transporter.sendMail({
      from: '"Maddison Foo Koch üëª" <anton1ebedev222@mail.ru>', // sender address
      to: "bgtobj@gmail.com", // list of receivers
      subject: "Hello ‚úî", // Subject line
      text: "Hello world?", // plain text body
    });
  
    console.log("Message sent: %s", info.messageId);
    // Message sent: <d786aa62-4e0a-070a-47ed-0b0666549519@ethereal.email>
  }
  
  main().catch(console.error); */

sendReview();

bot.hears('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', async ctx => {
        await ctx.reply(`–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç. –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç –í–∞–º –∏ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ü–ï–†–ï–ô–¢–ò`, 
            Markup.inlineKeyboard(
                [Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏', 'https://t.me/bgtobj'),],
            )
        ) 
})

const cities = Markup
        .keyboard([
            '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', 
            '–•–∞–±–∞—Ä–æ–≤—Å–∫', 
            '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –ö—Ä–∞–π',
            '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
            '–ú–æ—Å–∫–≤–∞',
        ])
        .oneTime()
        .resize()
bot.hears('–ê–¥—Ä–µ—Å–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∞–ø—Ç–µ–∫', async ctx => {
    await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç`, cities, {parse_mode: 'HTML'});
  
})

bot.hears('–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', async ctx => {
    let city = [];
    let idApt = [];
    let adress = [];
    let schedule = [];
    let urlYM = [];
    let aptekiKey = [];
    let apteki;
const msg = ctx.message.text;
    await getInfo();
    const aptekiSheet = doc.sheetsByIndex[0];
    const rows = await aptekiSheet.getRows();
    console.log(rows.length)
    for (i = 0; i < rows.length; i++) {
        city.push(rows[i].get('city'));
        idApt.push(rows[i].get('id_apt'));
        adress.push(rows[i].get('adress'));
        schedule.push(rows[i].get('schedule'));
        urlYM.push(rows[i].get('urlYM'));
        
         /* else if (msg === ) {
            await ctx.reply(`–ê–¥—Ä–µ—Å ${adress[i]}, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${schedule[i]}, –∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å ${urlYM[i]}`);
        } */
        if (city[i] === msg) {
            apteki = Markup.inlineKeyboard(
                [Markup.button.callback(`–ê–ø—Ç–µ–∫–∞ ‚Ññ ${idApt[i]} –Ω–∞ ${adress[i]}`, `${idApt[i]}`),],
            )
        
    }
    
        //aptekiKey.push(`–ê–ø—Ç–µ–∫–∞ ‚Ññ ${idApt[i]} –Ω–∞ ${adress[i]}`);
        
    }
    await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –∞–ø—Ç–µ–∫—É`, apteki, {parse_mode: 'HTML'});
        
})

/* bot.hears(`–ê–ø—Ç–µ–∫–∞ ‚Ññ ${idApt[i]} –Ω–∞ ${adress[i]}`, async (ctx) => {
    await ctx.reply(`–ê–¥—Ä–µ—Å ${adress[i]}, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${schedule[i]}, –∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å ${urlYM[i]}`);
}) */

bot.hears('–ú–æ–∏ –∞–ø—Ç–µ–∫–∏', async ctx => {
    await getInfo();
    const user = ctx.message.chat.username;
    const usersSheet = doc.sheetsByIndex[2];
    const rowsUser = await usersSheet.getRows();
    const aptekiSheet = doc.sheetsByIndex[0];
    const rows = await aptekiSheet.getRows();
    let idApt = [];
    let adress = [];
    let userName = [];
    let idAptUser = [];
    for (let j = 0; j < rows.length; j++) {
        idApt.push(rows[j].get('id_apt'));
        adress.push(rows[j].get('adress')); 
    }
    for (let k = 0; k < rowsUser.length; k++) {
        userName.push(rowsUser[k].get('username'));
        idAptUser.push(rowsUser[k].get('idApt'));
        if (userName == user) {
            return userName, idAptUser;
        }
    }
    let usersApteki;
    console.log(idAptUser)
    for (key in idAptUser) {
        if (idAptUser[key] === idApt[key] && userName[key] == user) {
        usersApteki = Markup.keyboard([
            `–ê–ø—Ç–µ–∫–∞ ‚Ññ${idApt} –Ω–∞ ${adress}`
        ]).resize()
    }
    }
    
    await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –∞–ø—Ç–µ–∫—É`, usersApteki)
    if (userName[key] !== user) {
        await ctx.reply(`–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω—É –∞–ø—Ç–µ–∫—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ`);
    }
    
    //await usersSheet.addRow({ username: user, city: '–ú–æ—Å–∫–≤–∞', idApt: '8' });
})

//await ctx.reply(`–ê–ø—Ç–µ–∫–∞ ‚Ññ ${idApt} –Ω–∞ ${adress}\n –≥. ${city}, —É–ª. ${adress}\n —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ${schedule}\n ${urlYM}`, {parse_mode: 'HTML'})

bot.hears('–ê–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', async ctx => {
    await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç`, cities, {parse_mode: 'HTML'});
})

bot.on(message('text'), async ctx => {
    let cityPromo = [];
    let namePromo = [];
    let datePromo = [];
    const msg = ctx.message.text;
    await getInfo();
    const promoSheet = doc.sheetsByIndex[1];
    const rowsPromo = await promoSheet.getRows();
    for (i = 0; i < rowsPromo.length; i++) {
        cityPromo.push(rowsPromo[i].get('city'));
        namePromo.push(rowsPromo[i].get('name'));
        datePromo.push(rowsPromo[i].get('date'));
        
         /* else if (msg === ) {
            await ctx.reply(`–ê–¥—Ä–µ—Å ${adress[i]}, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${schedule[i]}, –∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å ${urlYM[i]}`);
        } */

    
        //aptekiKey.push(`–ê–ø—Ç–µ–∫–∞ ‚Ññ ${idApt[i]} –Ω–∞ ${adress[i]}`);
        
    }
    for (const key in cityPromo) {
        if (cityPromo[key] === msg) {
            await ctx.reply(`${datePromo[key]} –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–∫—Ü–∏—è ${namePromo[key]}, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∞–∫—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ <a href="https://monastirev.ru/promotions/">—Å—Å—ã–ª–∫–µ</a>`, {parse_mode: 'HTML', disable_web_page_preview: true});
        }/* else {
            await ctx.reply(`–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π`);
        } */
    }
    
})

bot.launch()



